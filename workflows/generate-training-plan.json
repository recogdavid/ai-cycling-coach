[{"createdAt":"2025-10-26T14:08:09.667Z","updatedAt":"2025-10-27T11:11:40.559Z","id":"XM4v970VXcHqSleU","name":"Generate Training Plan","active":true,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"generate-plan","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[0,0],"id":"f462e22f-e010-4844-8080-4b33824f2fc1","name":"Webhook","webhookId":"6eb2a86d-3f09-4411-a4ad-a14570e7d9b0"},{"parameters":{"operation":"executeQuery","query":"SELECT \n  id,\n  name,\n  ftp_watts,\n  weight_kg,\n  training_goal,\n  weekly_hours_available,\n  unavailable_days\nFROM athletes\nWHERE id = {{ $json.body.athlete_id }};","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[208,0],"id":"6c3ad04c-9ed1-4b18-89ac-2c3bda72e619","name":"Fetch Athlete Data","credentials":{"postgres":{"id":"3G9vGSZaDuDPmuEG","name":"Postgres account"}}},{"parameters":{"jsCode":"// Get athlete data from previous node\nconst athlete = $input.first().json;\n\n// Calculate start date (next Monday)\nconst today = new Date();\nconst daysUntilMonday = (8 - today.getDay()) % 7 || 7;\nconst startDate = new Date(today);\nstartDate.setDate(today.getDate() + daysUntilMonday);\n\n// Calculate end date (1 weeks from start)\nconst endDate = new Date(startDate);\nendDate.setDate(startDate.getDate() + 6); \n\n// Format dates as YYYY-MM-DD\nconst formatDate = (date) => date.toISOString().split('T')[0];\n\n// Return individual fields for the HTTP node to use\nreturn {\n  json: {\n    athlete_id: athlete.id,\n    athlete_name: athlete.name,\n    ftp_watts: athlete.ftp_watts,\n    training_goal: athlete.training_goal,\n    weekly_hours_available: athlete.weekly_hours_available,\n    unavailable_days: athlete.unavailable_days.join(', '),\n    start_date: formatDate(startDate),\n    end_date: formatDate(endDate)\n  }\n};\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[416,0],"id":"7a6a53fb-5de3-491d-bcca-42956c5bcfdf","name":"Build the Ollama Prompt"},{"parameters":{"method":"POST","url":"http://host.docker.internal:11434/api/generate","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"contentType":"raw","rawContentType":"application/json","body":"={\n  \"model\": \"mistral\",\n  \"stream\": false,\n  \"format\": \"json\",\n  \"prompt\": \"You MUST respond with ONLY valid JSON, no other text.\\n\\nCreate a 7-day cycling training plan.\\nAthlete: FTP={{ $json.ftp_watts }}W, Goal={{ $json.training_goal }}, Hours={{ $json.weekly_hours_available }}/week, Skip={{ $json.unavailable_days }}\\nDates: {{ $json.start_date }} to {{ $json.end_date }}\\n\\nRESPOND WITH THIS EXACT JSON STRUCTURE:\\n{\\n  \\\"plan_summary\\\": \\\"one sentence overview\\\",\\n  \\\"workouts\\\": [\\n    {\\\"date\\\":\\\"2025-10-27\\\",\\\"type\\\":\\\"Endurance\\\",\\\"description\\\":\\\"Easy ride\\\",\\\"duration_minutes\\\":60,\\\"target_tss\\\":45,\\\"intervals\\\":[{\\\"duration_seconds\\\":3600,\\\"power_ftp_percent\\\":0.65}]},\\n    {\\\"date\\\":\\\"2025-10-28\\\",\\\"type\\\":\\\"Threshold\\\",\\\"description\\\":\\\"3x8min intervals\\\",\\\"duration_minutes\\\":75,\\\"target_tss\\\":85,\\\"intervals\\\":[{\\\"duration_seconds\\\":600,\\\"power_ftp_percent\\\":0.60},{\\\"duration_seconds\\\":480,\\\"power_ftp_percent\\\":0.95},{\\\"duration_seconds\\\":300,\\\"power_ftp_percent\\\":0.60}]}\\n  ]\\n}\\n\\nGenerate 7 workouts. ONLY output valid JSON, nothing else.\"\n}","options":{"timeout":300000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[624,0],"id":"fee14ef2-680d-4dab-ae0a-ab5ceeb20a71","name":"Call Ollama","retryOnFail":true},{"parameters":{"jsCode":"// Get the Ollama response\nconst response = $input.first().json;\n\n// The AI response is in the \"response\" field as a string\nlet aiResponseText = response.response;\n\n// Parse the JSON string into an object\nlet planData = JSON.parse(aiResponseText);\n\n// Get the athlete info from earlier in the workflow\nconst athleteData = $('Build the Ollama Prompt').first().json;\n\n// Return structured data ready for database insertion\nreturn {\n  json: {\n    athlete_id: athleteData.athlete_id,\n    start_date: athleteData.start_date,\n    end_date: athleteData.end_date,\n    goal: athleteData.training_goal,\n    plan_summary: planData.plan_summary,\n    workouts: planData.workouts\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[832,0],"id":"28ef91f1-2c27-4212-9a96-5bc96266e1eb","name":"Parse AI Response"},{"parameters":{"operation":"executeQuery","query":"INSERT INTO training_plans (\n  athlete_id,\n  start_date,\n  end_date,\n  goal,\n  status\n)\nVALUES (\n  {{ $json.athlete_id }},\n  '{{ $json.start_date }}',\n  '{{ $json.end_date }}',\n  '{{ $json.goal }}',\n  'active'\n)\nRETURNING id;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1040,0],"id":"c55cc5fe-758a-4bb4-ac88-9e0e23ab8f0c","name":"Create Training Plan","credentials":{"postgres":{"id":"3G9vGSZaDuDPmuEG","name":"Postgres account"}}},{"parameters":{"jsCode":"// Get the plan_id from the previous node (Create Training Plan)\nconst planId = $input.first().json.id;\n\n// Get the plan data from the Parse AI Response node\nconst planData = $('Parse AI Response').first().json;\n\n// Check if workouts exist\nif (!planData.workouts || !Array.isArray(planData.workouts)) {\n  throw new Error('No workouts found. Plan data: ' + JSON.stringify(planData));\n}\n\n// Transform each workout into a format ready for database insert\nconst workouts = planData.workouts.map(workout => ({\n  plan_id: planId,\n  athlete_id: planData.athlete_id,\n  scheduled_date: workout.date,\n  workout_type: workout.type,\n  description: workout.description,\n  duration_minutes: workout.duration_minutes,\n  target_tss: workout.target_tss,\n  intervals: JSON.stringify(workout.intervals),  // Convert to JSON string for JSONB column\n  status: 'planned'\n}));\n\n// Return as separate items (one per workout)\nreturn workouts.map(w => ({ json: w }));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1248,0],"id":"a072f975-23c0-4b84-abfb-90b512cf8fce","name":"Prepare Workouts for Insert"},{"parameters":{"operation":"executeQuery","query":"INSERT INTO planned_workouts (\n  plan_id,\n  athlete_id,\n  scheduled_date,\n  workout_type,\n  description,\n  duration_minutes,\n  target_tss,\n  intervals,\n  status\n)\nVALUES (\n  {{ $json.plan_id }},\n  {{ $json.athlete_id }},\n  '{{ $json.scheduled_date }}',\n  '{{ $json.workout_type }}',\n  '{{ $json.description }}',\n  {{ $json.duration_minutes }},\n  {{ $json.target_tss }},\n  '{{ $json.intervals }}'::jsonb,\n  '{{ $json.status }}'\n);","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1728,96],"id":"4a9d06c5-7705-42d9-8f73-6aed60b4a5b5","name":"Insert Planned Workouts","credentials":{"postgres":{"id":"3G9vGSZaDuDPmuEG","name":"Postgres account"}}},{"parameters":{"respondWith":"json","responseBody":"={\n  \"success\": true,\n  \"message\": \"Training plan created successfully\",\n  \"plan_id\": {{ $('Create Training Plan').first().json.id }},\n  \"workouts_created\": 7\n}","options":{"responseCode":200}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[1712,-80],"id":"6ee615ba-fdcd-40cf-9e91-2b0d6f0ee898","name":"Respond to Webhook"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1456,0],"id":"31f239cb-2392-4428-ae97-da58f30c1f03","name":"Build Batch Insert Query"}],"connections":{"Webhook":{"main":[[{"node":"Fetch Athlete Data","type":"main","index":0}]]},"Fetch Athlete Data":{"main":[[{"node":"Build the Ollama Prompt","type":"main","index":0}]]},"Build the Ollama Prompt":{"main":[[{"node":"Call Ollama","type":"main","index":0}]]},"Call Ollama":{"main":[[{"node":"Parse AI Response","type":"main","index":0}]]},"Parse AI Response":{"main":[[{"node":"Create Training Plan","type":"main","index":0}]]},"Create Training Plan":{"main":[[{"node":"Prepare Workouts for Insert","type":"main","index":0}]]},"Prepare Workouts for Insert":{"main":[[{"node":"Build Batch Insert Query","type":"main","index":0}]]},"Insert Planned Workouts":{"main":[[{"node":"Build Batch Insert Query","type":"main","index":0}]]},"Respond to Webhook":{"main":[[]]},"Build Batch Insert Query":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}],[{"node":"Insert Planned Workouts","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e1f3beff-b44c-40e4-8232-3456df9dde0f","triggerCount":1,"tags":[],"shared":[{"createdAt":"2025-10-26T14:08:09.667Z","updatedAt":"2025-10-26T14:08:09.667Z","role":"workflow:owner","workflowId":"XM4v970VXcHqSleU","projectId":"ufF06KBZ4z9JxMTX","project":{"createdAt":"2025-10-04T12:04:43.980Z","updatedAt":"2025-10-04T16:49:46.916Z","id":"ufF06KBZ4z9JxMTX","name":"DAVID ABOSCH <david@recognition-circular.org>","type":"personal","icon":null,"description":null}}]}]